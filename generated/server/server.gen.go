// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for PropertyType.
const (
	Municipal PropertyType = "Municipal"
	Private   PropertyType = "Private"
	State     PropertyType = "State"
	Undefined PropertyType = "Undefined"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// PropertyType defines model for PropertyType.
type PropertyType string

// Zone defines model for Zone.
type Zone struct {
	Id string `json:"id"`
}

// ZoneDetails defines model for ZoneDetails.
type ZoneDetails struct {
	Id             string       `json:"id"`
	PermittedUsage string       `json:"permittedUsage"`
	PropertyType   PropertyType `json:"propertyType"`
	RightType      *string      `json:"rightType,omitempty"`
}

// Zones defines model for Zones.
type Zones = []Zone

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get user favorite zones
	// (GET /user/{userID}/zones)
	GetUserUserIDZones(ctx echo.Context, userID string) error
	// Get zone analyses info
	// (GET /zones/{zoneID}/analise)
	GetZonesZoneIDAnalise(ctx echo.Context, zoneID string) error
	// Add zone to list of favorites
	// (POST /zones/{zoneID}/like)
	PostZonesZoneIDLike(ctx echo.Context, zoneID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUserUserIDZones converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserUserIDZones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameterWithOptions("simple", "userID", ctx.Param("userID"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserUserIDZones(ctx, userID)
	return err
}

// GetZonesZoneIDAnalise converts echo context to params.
func (w *ServerInterfaceWrapper) GetZonesZoneIDAnalise(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "zoneID" -------------
	var zoneID string

	err = runtime.BindStyledParameterWithOptions("simple", "zoneID", ctx.Param("zoneID"), &zoneID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetZonesZoneIDAnalise(ctx, zoneID)
	return err
}

// PostZonesZoneIDLike converts echo context to params.
func (w *ServerInterfaceWrapper) PostZonesZoneIDLike(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "zoneID" -------------
	var zoneID string

	err = runtime.BindStyledParameterWithOptions("simple", "zoneID", ctx.Param("zoneID"), &zoneID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostZonesZoneIDLike(ctx, zoneID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/user/:userID/zones", wrapper.GetUserUserIDZones)
	router.GET(baseURL+"/zones/:zoneID/analise", wrapper.GetZonesZoneIDAnalise)
	router.POST(baseURL+"/zones/:zoneID/like", wrapper.PostZonesZoneIDLike)

}
